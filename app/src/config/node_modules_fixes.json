[
  {
    "path": "/@awesome-cordova-plugins/core/decorators/common.d.ts",
    "name": "common.d.ts",
    "type": "replace",
    "plugin": "@awesome-cordova-plugins",
    "order": "before_build",
    "folder": "node_modules",
    "data": [
      {
        "regex": "(\\/*Promise<unknown>\\/*)",
        "text": "Promise<any>"
      }
    ]
  },
  {
    "path": "/@types/node/index.d.ts",
    "name": "index.d.ts",
    "type": "replace",
    "plugin": "@types",
    "order": "before_build",
    "folder": "node_modules",
    "data": [
      {
        "regex": "(\\/*\\/\\/\\/ <reference lib=\"es2017\" \\/>\\/*)",
        "text": "// <reference lib=\"es2017\" />"
      }
    ]
  },
  {
    "path": "/@ionic/app-scripts/dist/util/config.js",
    "name": "config.js",
    "type": "replace",
    "order": "before_build",
    "folder": "node_modules",
    "plugin": "@ionic",
    "data": [
      {
        "regex": "(\\/*context\\.isProd \\|\\| hasArg\\('--optimizeJs'\\)\\/*)",
        "text": "hasArg('--optimizeJs')"
      }
    ]
  },
  {
    "path": "/@angular/platform-browser-dynamic/esm5/platform-browser-dynamic.js",
    "name": "platform-browser-dynamic.js",
    "type": "replace",
    "plugin": "@angular",
    "order": "before_build",
    "folder": "node_modules",
    "data": [
      {
        "regex": "(\\/*throw new Error\\(\"No ResourceLoader implementation has been provided\\. Can't read the url \\\\\"\" \\+ url \\+ \"\\\\\"\"\\);\\/*)",
        "text": "    url = \"templates/\" + url;\n    var resolve;\n    var reject;\n    var promise = new Promise(function (res, rej) {\n        resolve = res;\n        reject = rej;\n    });\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", url, true);\n    xhr.responseType = \"text\";\n    xhr.onload = function () {\n        var response = xhr.response || xhr.responseText;\n        var status = xhr.status === 1223 ? 204 : xhr.status;\n        if (status === 0) {\n            status = response ? 200 : 0;\n}\n        if (200 <= status && status <= 300) {\n            resolve(response);\n        }\nelse {\n            reject(\"Failed to load \" + url);\n        }\n};\n    xhr.onerror = function () { reject(\"Failed to load \" + url); };\n    xhr.send();\n    return promise;\n"
      }
    ]
  },
  {
    "path": "/cordova-sqlite-storage/src/android/io/sqlc/SQLitePlugin.java",
    "name": "SQLitePlugin.java",
    "type": "replace",
    "plugin": "cordova-sqlite-storage",
    "order": "before_build",
    "folder": "node_modules",
    "data": [
      {
        "regex": "(\\/*mydb\\.open\\(dbfile\\);\\/*)",
        "text": "    try {\n                    mydb.open(dbfile);\n                } catch (Exception e) {\n                    if (mydb instanceof SQLiteConnectorDatabase &&\n                        (e instanceof NullPointerException || e instanceof java.sql.SQLException)) {\n                        Log.v(SQLitePlugin.class.getSimpleName(), \"Applying hotfix for Android 11+\");\n                        mydb = new SQLiteAndroidDatabase();\n                        mydb.open(dbfile);\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n"
      }
    ]
  },
  {
    "path": "/cordova-plugin-qrscanner/plugin.xml",
    "name": "plugin.xml",
    "type": "remove",
    "plugin": "cordova-plugin-qrscanner",
    "order": "before_build",
    "folder": "node_modules",
    "data": [
      {
        "regex": "(\\/*<uses-permission android:name=\"android\\.permission\\.CAMERA\" android:required=\"false\" \\/>\\/*)"
      },
      {
        "regex": "(\\/*<uses-feature android:name=\"android\\.hardware\\.camera\" android:required=\"false\" \\/>\\/*)"
      }
    ]
  },
  {
    "path": "/cordova-plugin-file-transfer/src/ios/CDVFileTransfer.m",
    "name": "CDVFileTransfer.m",
    "type": "remove",
    "plugin": "cordova-plugin-file-transfer",
    "order": "before_build",
    "folder": "node_modules",
    "data": [
      {
        "regex": "(\\/*NSString\\* userAgent = \\[self\\.commandDelegate userAgent];\n +if \\(userAgent\\) {\n + \\[req setValue:userAgent forHTTPHeaderField:@\"User-Agent\"];\n +}\\/*)"
      }
    ]
  },
  {
    "path": "/cordova-plugin-file-opener2/plugin.xml",
    "name": "plugin.xml",
    "type": "remove",
    "plugin": "cordova-plugin-file-opener2",
    "order": "before_build",
    "folder": "node_modules",
    "data": [
      {
        "regex": "(\\/* +<uses-permission android:name=\"android\\.permission\\.REQUEST_INSTALL_PACKAGES\" \\/>\\/*)"
      }
    ]
  },
  {
    "path": "/cordova-plugin-camera/src/android/CameraLauncher.java",
    "name": "CameraLauncher.java",
    "type": "replace",
    "plugin": "cordova-plugin-camera",
    "order": "before_build",
    "folder": "node_modules",
    "data": [
      {
        "regex": "(\\/* +if\\(intent.resolveActivity\\(mPm\\) != null\\)\n +{\n +this\\.cordova\\.startActivityForResult\\(\\(CordovaPlugin\\) this, intent, \\(CAMERA \\+ 1\\) \\* 16 \\+ returnType \\+ 1\\);\n +}\n +else\n +{\n +LOG\\.d\\(LOG_TAG, \"Error: You don't have a default camera\\.  Your device may not be CTS complaint\\.\"\\);\n +}\\/*)",
        "text": "            this.cordova.startActivityForResult((CordovaPlugin) this, intent, (CAMERA + 1) * 16 + returnType + 1);"
      }
    ]
  },
  {
    "path": "/cordova-plugin-qrscanner/plugin.xml",
    "name": "plugin.xml",
    "type": "remove",
    "plugin": "cordova-plugin-qrscanner",
    "order": "before_build",
    "folder": "node_modules",
    "data": [
      {
        "regex": "(\\/*<uses-permission android:name=\"android\\.permission\\.CAMERA\" android:required=\"false\" \\/>\\/*)"
      },
      {
        "regex": "(\\/*<uses-feature android:name=\"android\\.hardware\\.camera\" android:required=\"false\" \\/>\\/*)"
      }
    ]
  },
  {
    "path": "/cordova-plugin-contact/src/android/ContactManager.java",
    "name": "ContactManager.java",
    "type": "replace",
    "plugin": "cordova-plugin-contact",
    "order": "before_build",
    "folder": "node_modules",
    "data": [
      {
        "regex": "(\\/* +else if \\(action\\.equals\\(\"save\"\\)\\) {\n +if\\(PermissionHelper\\.hasPermission\\(this, WRITE\\)\\)\\/*)",
        "text": "        else if (action.equals(\"save\")) {\n            if(PermissionHelper.hasPermission(this, WRITE) && PermissionHelper.hasPermission(this, READ))"
      },
      {
        "regex": "(\\/* +else if \\(action\\.equals\\(\"remove\"\\)\\) {\n +if\\(PermissionHelper\\.hasPermission\\(this, WRITE\\)\\)\\/*)",
        "text": "        else if (action.equals(\"remove\")) {\n            if(PermissionHelper.hasPermission(this, WRITE) && PermissionHelper.hasPermission(this, READ))"
      },
      {
        "regex": "(\\/* +JSONArray res = contactAccessor\\.search\\(filter, options\\);\n +callbackContext\\.success\\(res\\);\\/*)",
        "text": "                try {\n                    JSONArray res = contactAccessor.search(filter, options);\n                    callbackContext.success(res);\n                } catch (SecurityException e) {\n                    getReadPermission(SEARCH_REQ_CODE);\n                }"
      },
      {
        "regex": "(\\/* +case SAVE_REQ_CODE:\n +save\\(executeArgs\\);\\/*)",
        "text": "            case SAVE_REQ_CODE:\n                if (!PermissionHelper.hasPermission(this, READ)) getReadPermission(SAVE_REQ_CODE);\n                else save(executeArgs);"
      },
      {
        "regex": "(\\/* +case REMOVE_REQ_CODE:\n +save\\(executeArgs\\);\\/*)",
        "text": "            case SAVE_REQ_CODE:\n                if (!PermissionHelper.hasPermission(this, READ)) getReadPermission(REMOVE_REQ_CODE);\n                else remove(executeArgs);"
      }
    ]
  },
  {
    "path": "/com-darryncampbell-cordova-plugin-intent/plugin.xml",
    "name": "plugin.xml",
    "type": "remove",
    "plugin": "com-darryncampbell-cordova-plugin-intent",
    "order": "before_build",
    "folder": "node_modules",
    "data": [
      {
        "regex": "(\\/* +<config-file target=\"AndroidManifest\\.xml\" platform=\"android\" parent=\"\\/manifest\" mode=\"merge\">\\r\n +<uses-permission android:name=\"android.permission.REQUEST_INSTALL_PACKAGES\" \\/>\\r\n +<\\/config-file>\\r\n\\/*)"
      }
    ]
  }
]
